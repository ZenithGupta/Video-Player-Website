# Generated by Django 5.2.5 on 2025-08-18 18:47

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('validity_days', models.IntegerField(default=35)),
                ('bestseller', models.BooleanField(default=False)),
                ('price', models.CharField(default='0', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PainAssessmentSubmission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pain_level', models.IntegerField(help_text='Question 1: Current level of pain')),
                ('rising_pain', models.IntegerField(help_text='Question 2: Pain when rising from a seated position')),
                ('standing_duration', models.IntegerField(help_text='Question 3: How long can you stand without pain?')),
                ('can_climb_stairs', models.IntegerField(help_text='Question 4: Can you climb stairs?')),
                ('descending_stairs_pain', models.IntegerField(help_text='Question 5: Pain while descending stairs')),
                ('walking_distance', models.IntegerField(help_text='Question 6: How far can you walk?')),
                ('knee_bend_ability', models.IntegerField(help_text='Question 7: Can you fully bend your knees?')),
                ('can_sit_on_floor', models.IntegerField(help_text='Question 8: Can you sit on the floor?')),
                ('stand_from_chair_ability', models.IntegerField(help_text='Question 9: Can you stand from a chair without support?')),
                ('joint_stiffness', models.IntegerField(help_text='Question 10: Do your joints feel stiff?')),
                ('limp_while_walking', models.IntegerField(help_text='Question 11: Do you lean or limp while walking?')),
                ('can_bend_fully', models.IntegerField(help_text='Question 12: Can you bend down fully?')),
                ('stand_on_one_leg_duration', models.IntegerField(help_text='Question 13: How long can you stand on one leg?')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('instructor', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('vimeo_url', models.URLField(max_length=500)),
                ('image', models.URLField(max_length=500)),
                ('category', models.CharField(choices=[('Pain Relief', 'Pain Relief'), ('Strength Training', 'Strength Training'), ('Mobility & Flexibility', 'Mobility & Flexibility'), ('Posture Correction', 'Posture Correction'), ('Sports Injury', 'Sports Injury')], max_length=50)),
                ('rating', models.DecimalField(decimal_places=1, max_digits=2)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other')], max_length=1, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='api_user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='api_user_permissions_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserCourse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField()),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user')),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='playlists', to='api.course')),
                ('videos', models.ManyToManyField(related_name='playlists', to='api.video')),
            ],
        ),
    ]
